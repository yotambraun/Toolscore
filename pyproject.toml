[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "tool-scorer"
version = "1.1.0"
description = "Evaluate LLM tool usage and function calling accuracy with comprehensive metrics, support for OpenAI/Anthropic/LangChain, pytest integration, and beautiful reports"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "Apache-2.0"}
authors = [
    {name = "Yotam Barun", email = "yotambarun93@gmail.com"},
]
keywords = [
    "llm",
    "evaluation",
    "tool-use",
    "function-calling",
    "metrics",
    "ai-agents",
    "benchmarking",
    "openai",
    "anthropic",
    "claude",
    "gpt",
    "langchain",
    "testing",
    "accuracy",
    "agent-evaluation",
    "llm-testing",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Testing :: Unit",
    "Typing :: Typed",
    "Framework :: Pytest",
]
dependencies = [
    "click>=8.1.0",
    "jinja2>=3.1.0",
    "python-Levenshtein>=0.25.0",
    "rich>=13.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "mypy>=1.8.0",
    "ruff>=0.6.0",
    "types-click",
    "python-semantic-release>=9.0.0",
]
http = [
    "httpx>=0.27.0",
]
llm = [
    "openai>=1.0.0",
]
langchain = [
    "langchain>=0.1.0",
]
all = [
    "httpx>=0.27.0",
    "openai>=1.0.0",
    "langchain>=0.1.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=2.0.0",
    "myst-parser>=2.0.0",
]

[project.scripts]
tool-scorer = "toolscore.cli:main"

[project.entry-points.pytest11]
toolscore = "toolscore.pytest_plugin"

[project.urls]
Homepage = "https://github.com/yotambraun/toolscore"
Documentation = "https://github.com/yotambraun/toolscore#readme"
Repository = "https://github.com/yotambraun/toolscore"
Issues = "https://github.com/yotambraun/toolscore/issues"

[tool.hatch.build.targets.wheel]
packages = ["toolscore"]

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
    "RUF",    # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "UP007",  # use X | Y for type annotations (allow Optional)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*.py" = ["ARG", "S101"]  # Allow pytest fixtures and asserts

[tool.ruff.lint.isort]
known-first-party = ["toolscore"]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "Levenshtein"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "rich.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "openai"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "langchain.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=toolscore",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--ignore=tests/manual",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["toolscore"]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
branch = "main"
upload_to_vcs_release = true
build_command = "python -m build"
major_on_zero = false
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [
    "^Merge",
    "^Bump",
    "^chore\\(release\\):",
]

[tool.semantic_release.commit_parser_options]
allowed_tags = ["feat", "fix", "docs", "style", "refactor", "perf", "test", "build", "ci", "chore"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
